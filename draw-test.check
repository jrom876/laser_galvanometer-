
//===========================================================
//
//  File Name:           draw-test.check
//  Project Name:        LP_Jetson
//  Project Owner:       Steven W. Goldstein
//  Project Engineer:    Jacob M. Romero
//                       Creative Engineering Solutions, LLC
//  Github Repo:         https://github.com/jrom876/LP_Jetson
//
//===========================================================

#include <check.h>
#include <inttypes.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "laserPointer.h"
#include <math.h>

#define PI 3.14159265359

//// To generate and run this test code automatically,
//// run the following commands on the linux command line:
//// checkmk draw-test.check >draw-test.c
//// make -f make-test.mk draw
//

struct LaserPointer {
  int xcoord;
  int ycoord;
  double zcoord;
};

struct LaserPointer makeLaser(int x, int y, double z) {
  struct LaserPointer lp0 = createLaser(x,y,z);
  return lp0;
}

void polarToCartesian(double r, double thetaDegrees, double z) {
  double theta = thetaDegrees * PI/180.0;
  double xc = r * cos(theta);
  double yc = r * sin(theta);
  double zc = z;
  printf("Polar to Cartesian: radians = %lf\t Degrees = %lf\t distance = %lf\n",theta,thetaDegrees,r);
  printf("xc:  %lf  yc:  %lf  zc:  %0.2lf\n\n",xc,yc,zc);
}

void cartesianToPolar(int x, int y, double z){
  double r = sqrt((x*x)+(y*y));
  double theta = atan(y/x);
  double thetaDegrees = theta * (180.0/PI);
  double xc = r * cos(theta);
  double yc = r * sin(theta);
  double zc = z;
  printf("thetaDegrees:  %0.5lf  radius:  %0.5lf\n",thetaDegrees,r);
  printf("xc:  %0.3lf  yc:  %0.3lf  zc:  %0.3lf\n",xc,yc,zc);
}

int runThis(void) {
  printf("\nTest the testfile\n");
  //printf("%d = %c\n", 127,"127");
  return 0;
}

#test lptest
//runThis();
makeLaser(XMAX/2,YMAX/2,ZMAX/2.0);
polarToCartesian(sqrt(2),60,2);
cartesanToPolar(1,1,2.5);
